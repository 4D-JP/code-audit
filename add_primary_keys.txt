$logFolder:=Get 4D folder(Logs folder)
$logFileName:="add_primary_key"
$logFileSuffix:=".log"
$logFileIndex:=0

$primaryKeyDefaultName:="PK_UUID"

$logPath:=$logFolder+$logFileName+$logFileSuffix
While (Test path name($logPath)=Is a document))
	$logFileIndex:=$logFileIndex+1
	$logPath:=$logFolder+$logFileName+Char(Space)+String($logFileIndex)+$logFileSuffix
End while 

$logFileDocRef:=Create document($logPath)

If (OK=1)
	
	C_TEXT($logMessage)
	USE CHARACTER SET("utf-8";0)
	
	ARRAY LONGINT($TABLE_IDS;0)
	ARRAY TEXT($TABLE_NAMES;0)
	
	Begin SQL
		/* all tables without a primary key */
		SELECT TABLE_ID,TABLE_NAME
		FROM _USER_TABLES
		WHERE _USER_TABLES.TABLE_ID NOT IN 
		(SELECT TABLE_ID FROM _USER_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'P')
		INTO :$TABLE_IDS,:$TABLE_NAMES;
	End SQL
	
	$logMessage:="number of tables with no primary key: "+String(Size of array($TABLE_IDS))+"\n\n"
	SEND PACKET($logFileDocRef;$logMessage)
	
	If (Size of array($TABLE_IDS)#0)
		
		For ($i;1;Size of array($TABLE_IDS))
			$logMessage:=String($TABLE_IDS{$i})+"\t"+$TABLE_NAMES{$i}+"\n"
			SEND PACKET($logFileDocRef;$logMessage)
		End for 
		
		$logMessage:="\nadding primary keys...\n\n"
		SEND PACKET($logFileDocRef;$logMessage)
		
		For ($i;1;Size of array($TABLE_IDS))
			
			$TABLE_ID:=$TABLE_IDS{$i}
			$TABLE_NAME:=$TABLE_NAMES{$i}
			
			ARRAY TEXT($COLUMN_NAMES;0)
			
			Begin SQL
				/* get field names */
				SELECT COLUMN_NAME
				FROM _USER_COLUMNS
				WHERE TABLE_ID = :$TABLE_ID
				INTO :$COLUMN_NAMES;
			End SQL
			
			$primaryKeyIndex:=0
			$primaryKeyName:=$primaryKeyDefaultName
			
			While (Find in array($COLUMN_NAMES;$primaryKeyName)#-1)
				$primaryKeyIndex:=$primaryKeyIndex+1
				$primaryKeyName:=$primaryKeyDefaultName+String($primaryKeyIndex)
			End while 
			
			$SQL:="ALTER TABLE "+"["+$TABLE_NAME+"]"+\
			" ADD TRAILING ["+$primaryKeyName+"] UUID AUTO_GENERATE PRIMARY KEY;"
			
			Begin SQL
				EXECUTE IMMEDIATE :$SQL;
			End SQL
			
			If (OK=1)
				$logMessage:=String($TABLE_IDS{$i})+"\t"+$TABLE_NAME+"\t"+$primaryKeyName+"\n"
				SEND PACKET($logFileDocRef;$logMessage)
			End if 
			
		End for 
		
		$logMessage:="\nadding values...\n\n"
		SEND PACKET($logFileDocRef;$logMessage)
		
		For ($i;1;Size of array($TABLE_IDS))
			
			$TABLE_ID:=$TABLE_IDS{$i}
			$TABLE_NAME:=$TABLE_NAMES{$i}
			$COLUMN_ID:=0
			
			$primaryKeyName:=""
			
			Begin SQL
				SELECT _USER_CONS_COLUMNS.COLUMN_NAME,_USER_CONS_COLUMNS.COLUMN_ID
				FROM _USER_CONSTRAINTS,_USER_CONS_COLUMNS
				WHERE CONSTRAINT_TYPE = 'P'
				AND _USER_CONS_COLUMNS.TABLE_ID = :$TABLE_ID
				AND _USER_CONS_COLUMNS.CONSTRAINT_ID = _USER_CONSTRAINTS.CONSTRAINT_ID
				INTO :$primaryKeyName,:$COLUMN_ID;
			End SQL
			
			$field:=Field($TABLE_ID;$COLUMN_ID)
			ALL RECORDS(Table($TABLE_ID)->)
			$length:=Records in table(Table($TABLE_ID)->)
			
			APPLY TO SELECTION(Table($TABLE_ID)->;$field->:=Generate UUID)
			
			$logMessage:=String($TABLE_IDS{$i})+"\t"+$TABLE_NAME+"\t"+$primaryKeyName+"\t"+String($length)+"\n"
			SEND PACKET($logFileDocRef;$logMessage)
			
			$indexName:=$TABLE_NAME+"."+$primaryKeyName
			
			$SQL:="CREATE UNIQUE INDEX "+"["+$indexName+"]"+\
			" ON ["+$TABLE_NAME+"] ("+"["+$primaryKeyName+"]);"
			
			Begin SQL
				EXECUTE IMMEDIATE :$SQL;
			End SQL
			
		End for 
		
	End if 
	
	USE CHARACTER SET("utf-8";*)
	CLOSE DOCUMENT($logFileDocRef)
	SHOW ON DISK($logPath)
	
End if 
